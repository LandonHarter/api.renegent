generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id        String    @id
  key       String    @unique
  name      String
  createdAt DateTime  @default(now())
  userId    String
  enabled   Boolean   @default(true)
  lastUsed  DateTime?
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Providers {
  id                String  @id
  openaiApiKey      String?
  openaiBaseUrl     String  @default("https://api.openai.com/v1")
  anthropicApiKey   String?
  anthropicBaseUrl  String  @default("https://api.anthropic.com/v1")
  googleGenApiKey   String?
  googleGenBaseUrl  String  @default("https://generativelanguage.googleapis.com/v1beta")
  azureResourceName String?
  azureApiKey       String?
  xApiKey           String?
  xBaseurl          String  @default("https://api.x.ai/v1")
  deepseekApiKey    String?
  deepseekBaseUrl   String  @default("https://api.deepseek.com/v1")
  perplexityApiKey  String?
  perplexityBaseUrl String  @default("https://api.perplexity.ai")
  user              user    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id              String          @id
  name            String
  email           String          @unique
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  normalizedEmail String?
  ApiKey          ApiKey[]
  DataSource      DataSource[]
  KnowledgeBase   KnowledgeBase[]
  Model           Model[]
  Prompt          Prompt[]
  Providers       Providers?
  account         account[]
  session         session[]
}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model Model {
  id              String          @id
  name            String
  modelId         String
  provider        Provider
  providerModelId String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  userId          String
  user            user            @relation(fields: [userId], references: [id], onDelete: Cascade)
  KnowledgeBase   KnowledgeBase[] @relation("KnowledgeBaseToModel")
  Prompt          Prompt[]        @relation("ModelToPrompt")
}

model Prompt {
  id        String   @id
  name      String
  prompt    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  variables String[] @default([])
  userId    String
  promptId  String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Model     Model[]  @relation("ModelToPrompt")
}

model DataSource {
  id             String           @id
  name           String
  createdAt      DateTime         @default(now())
  userId         String
  description    String
  user           user             @relation(fields: [userId], references: [id], onDelete: Cascade)
  data_fragments data_fragments[]
  KnowledgeBase  KnowledgeBase[]  @relation("DataSourceToKnowledgeBase")
}

model KnowledgeBase {
  id          String       @id
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  userId      String
  description String       @default("No description")
  user        user         @relation(fields: [userId], references: [id], onDelete: Cascade)
  DataSource  DataSource[] @relation("DataSourceToKnowledgeBase")
  Model       Model[]      @relation("KnowledgeBaseToModel")
}

model data_fragments {
  id           String                @id
  content      String
  embedding    Unsupported("vector")
  dataSourceId String
  DataSource   DataSource            @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
}

enum Provider {
  OPENAI
  ANTHROPIC
  GOOGLE_GEN
  AZURE
  X
  DEEPSEEK
  PERPLEXITY
}
